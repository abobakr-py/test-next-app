"use client";
import Image from "next/image";
import Link from "next/link";
import { useEffect, useRef, useState } from "react";
import { useAuth } from "@/Zustand/useAuth";
import { useRouter } from "next/navigation";
import { useTranslations } from "next-intl";
import global from "../../assets/global.svg";
import profile from "../../assets/profile-circle.svg";

interface NavbarProps {
  lang: any;
}

const Navbar: React.FC<NavbarProps> = ({ lang }) => {
  const t = useTranslations();
  const router = useRouter();
  const [isProfileDropdownOpen, setIsProfileDropdownOpen] = useState(false);
  const [isLanguageDropdownOpen, setIsLanguageDropdownOpen] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false); // Burger menu state
  const profileDropdownRef = useRef<HTMLDivElement>(null);
  const languageDropdownRef = useRef<HTMLDivElement>(null);
  const { clearToken, isAuthenticated, user } = useAuth();

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        profileDropdownRef.current &&
        !profileDropdownRef.current.contains(event.target as Node)
      ) {
        setIsProfileDropdownOpen(false);
      }
      if (
        languageDropdownRef.current &&
        !languageDropdownRef.current.contains(event.target as Node)
      ) {
        setIsLanguageDropdownOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const handleLogout = () => {
    clearToken();
    setIsProfileDropdownOpen(false);
    router.push("/signUp");
  };

  const [currentPath, setCurrentPath] = useState("");

  useEffect(() => {
    if (typeof window !== "undefined") {
      const path = window.location.pathname;
      setCurrentPath(path);
    }
  }, []);

  const handleLanguageSwitch = (lang: string) => {
    const segments = currentPath.split("/").filter(Boolean);
    segments[0] = lang;
    return `/${segments.join("/")}`;
  };

  return (
    <nav
      dir={lang === "ar" ? "ltr" : "rtl"}
      className="flex items-center justify-between p-4 bg-white shadow-md"
    >
      <div className="flex items-center">
        {/* Burger Icon */}
        <button
          className="block md:hidden focus:outline-none"
          onClick={() => setIsMenuOpen(!isMenuOpen)}
        >
          <svg
            className="w-8 h-8 text-gray-800"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M4 6h16M4 12h16M4 18h16"
            />
          </svg>
        </button>

        {/* Logo */}
        <span className="font-notoKufi-600 text-[#121212] ml-4">CryptoLab</span>
      </div>

      {/* Language Switcher */}
      <div className="hidden md:flex items-center" ref={languageDropdownRef}>
        <div
          className="bg-[#F5F5F5] p-2 rounded-lg cursor-pointer flex items-center"
          onClick={() => setIsLanguageDropdownOpen(!isLanguageDropdownOpen)}
        >
          <p className="text-[#121212] text-base font-notoKufi-500">
            {lang === "ar" ? "عربي" : "English"}
          </p>
          <Image src={global} alt="global" className="mx-2" loading="eager" />
        </div>

        {isLanguageDropdownOpen && (
          <div className="absolute right-0 mt-2 w-28 bg-white border rounded-lg shadow-lg z-10 flex flex-col">
            <Link
              href={handleLanguageSwitch("en")}
              className="px-4 py-2 text-sm text-gray-700 font-notoKufi-400 hover:bg-gray-100 cursor-pointer text-right rounded-lg"
            >
              English
            </Link>
            <Link
              href={handleLanguageSwitch("ar")}
              className="px-4 py-2 text-sm text-gray-700 font-notoKufi-400 hover:bg-gray-100 cursor-pointer text-right rounded-lg"
            >
              عربي
            </Link>
          </div>
        )}
      </div>

      {/* Menu Links */}
      <div
        className={`${
          isMenuOpen ? "block" : "hidden"
        } md:flex flex-col md:flex-row items-center md:space-x-6`}
      >
        <Link href="/" className="text-base hover:underline px-3 py-2">
          الصفحة الرئيسية
        </Link>
        <Link href="/articles" className="text-base hover:underline px-3 py-2">
          المقالات
        </Link>
        <Link href="/about" className="text-base hover:underline px-3 py-2">
          من نحن
        </Link>

        {/* Profile/Login */}
        {isAuthenticated ? (
          <div className="relative" ref={profileDropdownRef}>
            <div
              className="flex items-center cursor-pointer"
              onClick={() => setIsProfileDropdownOpen(!isProfileDropdownOpen)}
            >
              <p>{user?.username}</p>
              <Image
                src={profile}
                alt="profile"
                className="mx-2"
                loading="eager"
              />
            </div>

            {isProfileDropdownOpen && (
              <div className="absolute right-0 mt-2 w-48 bg-white border rounded-lg shadow-lg z-10">
                <Link href="/profile">
                  <div className="px-4 py-2 text-sm hover:bg-gray-100 cursor-pointer text-right rounded-lg">
                    الصفحة الشخصية
                  </div>
                </Link>
                <div
                  onClick={handleLogout}
                  className="px-4 py-2 text-sm hover:bg-gray-100 cursor-pointer text-right rounded-lg"
                >
                  تسجيل الخروج
                </div>
              </div>
            )}
          </div>
        ) : (
          <Link href="/signUp">
            <div className="bg-[#121212] text-white py-2 px-4 rounded-lg">
              تسجيل الدخول
            </div>
          </Link>
        )}
      </div>
    </nav>
  );
};

export default Navbar;
